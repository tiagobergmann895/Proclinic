
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  role: 'role',
  passwordHash: 'passwordHash',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  birthDate: 'birthDate',
  document: 'document',
  phone: 'phone',
  email: 'email',
  address: 'address',
  consentGivenAt: 'consentGivenAt',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  cnpj: 'cnpj',
  contact: 'contact',
  email: 'email',
  phone: 'phone'
};

exports.Prisma.ItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  unit: 'unit',
  sku: 'sku',
  minStock: 'minStock',
  isControlled: 'isControlled',
  createdAt: 'createdAt'
};

exports.Prisma.ItemBatchScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  batchCode: 'batchCode',
  expirationDate: 'expirationDate',
  unitCost: 'unitCost',
  quantityAvailable: 'quantityAvailable',
  createdAt: 'createdAt'
};

exports.Prisma.InventoryMovementScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  batchId: 'batchId',
  type: 'type',
  quantity: 'quantity',
  unitCost: 'unitCost',
  reason: 'reason',
  linkedProcedureId: 'linkedProcedureId',
  performedByUserId: 'performedByUserId',
  createdAt: 'createdAt'
};

exports.Prisma.ProcedureTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  defaultDurationMin: 'defaultDurationMin',
  defaultItems: 'defaultItems'
};

exports.Prisma.ProcedureScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  professionalUserId: 'professionalUserId',
  procedureTypeId: 'procedureTypeId',
  scheduledAt: 'scheduledAt',
  startedAt: 'startedAt',
  finishedAt: 'finishedAt',
  room: 'room',
  status: 'status',
  notes: 'notes'
};

exports.Prisma.CostSheetScalarFieldEnum = {
  id: 'id',
  procedureId: 'procedureId',
  itemsCost: 'itemsCost',
  laborCost: 'laborCost',
  overheadCost: 'overheadCost',
  totalCost: 'totalCost',
  marginTarget: 'marginTarget',
  suggestedPrice: 'suggestedPrice',
  createdAt: 'createdAt'
};

exports.Prisma.PriceRuleScalarFieldEnum = {
  id: 'id',
  scope: 'scope',
  scopeId: 'scopeId',
  marginTarget: 'marginTarget',
  minMargin: 'minMargin',
  maxMargin: 'maxMargin',
  dynamicAdjustments: 'dynamicAdjustments'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  procedureId: 'procedureId',
  method: 'method',
  amount: 'amount',
  status: 'status',
  paidAt: 'paidAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  userName: 'userName',
  userRole: 'userRole',
  action: 'action',
  entity: 'entity',
  entityId: 'entityId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  tenantId: 'tenantId',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  description: 'description',
  changes: 'changes',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  accessPurpose: 'accessPurpose',
  justification: 'justification',
  previousHash: 'previousHash',
  currentHash: 'currentHash',
  timestamp: 'timestamp'
};

exports.Prisma.ClinicalNoteScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  patientId: 'patientId',
  content: 'content',
  authorId: 'authorId',
  signed: 'signed',
  signedAt: 'signedAt'
};

exports.Prisma.ObservationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  patientId: 'patientId',
  code: 'code',
  value: 'value',
  unit: 'unit'
};

exports.Prisma.PrescriptionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  patientId: 'patientId',
  medication: 'medication',
  dosage: 'dosage',
  frequency: 'frequency'
};

exports.Prisma.DiagnosticReportScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  patientId: 'patientId',
  code: 'code',
  result: 'result'
};

exports.Prisma.AllergyIntoleranceScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  patientId: 'patientId',
  allergen: 'allergen',
  reaction: 'reaction',
  severity: 'severity'
};

exports.Prisma.DocumentReferenceScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  patientId: 'patientId',
  title: 'title',
  url: 'url',
  type: 'type'
};

exports.Prisma.ConditionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  patientId: 'patientId',
  code: 'code',
  name: 'name',
  status: 'status'
};

exports.Prisma.ImmunizationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  patientId: 'patientId',
  vaccine: 'vaccine',
  date: 'date'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  recepcao: 'recepcao',
  profissional: 'profissional',
  financeiro: 'financeiro',
  gestor: 'gestor'
};

exports.MovementType = exports.$Enums.MovementType = {
  ENTRY: 'ENTRY',
  EXIT: 'EXIT',
  ADJUST: 'ADJUST'
};

exports.ProcedureStatus = exports.$Enums.ProcedureStatus = {
  SCHEDULED: 'SCHEDULED',
  DONE: 'DONE',
  CANCELLED: 'CANCELLED'
};

exports.PriceScope = exports.$Enums.PriceScope = {
  PROCEDURE_TYPE: 'PROCEDURE_TYPE',
  GLOBAL: 'GLOBAL'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  PIX: 'PIX',
  CARD: 'CARD',
  BOLETO: 'BOLETO',
  CASH: 'CASH'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Patient: 'Patient',
  Supplier: 'Supplier',
  Item: 'Item',
  ItemBatch: 'ItemBatch',
  InventoryMovement: 'InventoryMovement',
  ProcedureType: 'ProcedureType',
  Procedure: 'Procedure',
  CostSheet: 'CostSheet',
  PriceRule: 'PriceRule',
  Payment: 'Payment',
  AuditLog: 'AuditLog',
  ClinicalNote: 'ClinicalNote',
  Observation: 'Observation',
  Prescription: 'Prescription',
  DiagnosticReport: 'DiagnosticReport',
  AllergyIntolerance: 'AllergyIntolerance',
  DocumentReference: 'DocumentReference',
  Condition: 'Condition',
  Immunization: 'Immunization'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
